{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iQAqBeA,EAlBA,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,MAAMC,EAA8B,EAA9BA,SAASC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,YAClC,OACI,sBAAKC,UAAWC,IAAMC,OAAtB,UACI,6BAAKN,IACL,6BACKG,EAAYI,KAAI,SAAAC,GAAU,OACvB,6BAAKA,EAAWC,YAGxB,4BAAIR,IACJ,qBAAKG,UAAWC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,SC+C1CC,G,MAxDL,WAER,IAFY,EAKeC,mBAAS,IALxB,mBAKNC,EALM,KAKGC,EALH,OAMaF,mBAAS,IANtB,mBAMNG,EANM,KAMEC,EANF,OAOWJ,mBAAS,UAPpB,mBAONK,EAPM,KAOCC,EAPD,KAUZC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OACUL,EADV,mBAbhB,WAagB,oBAZf,qCAWK,cACXM,EADW,gBAIAA,EAASC,OAJT,OAIXC,EAJW,OAKjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,2CAAH,qDAoBhB,OACE,sBAAKvB,UAAU,MAAf,UACE,uBAAM0B,SARM,SAAAC,GACdA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKmBb,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAa6B,KAAK,OAAOC,MAAOlB,EAAQmB,SAd5C,SAAAJ,GACjBd,EAAUc,EAAEK,OAAOF,OACnBN,QAAQC,IAAIb,MAaR,wBAAQZ,UAAU,gBAAgB6B,KAAK,SAAvC,uBAGF,qBAAK7B,UAAU,UAAf,SACCU,EAAQP,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CACAN,MAAOM,EAAOA,OAAO+B,MACrBpC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,wBCvCpBmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.0fa608ec.chunk.js","sourcesContent":["import React from \"react\";\nimport style from './recipe.module.css';\n\nconst Recipe = ({title,calories,image,ingredients})=>{\n    return(\n        <div className={style.recipe}>\n            <h1>{title}</h1>\n            <ol>\n                {ingredients.map(ingredient=>(\n                    <li>{ingredient.text}</li>\n                ))}\n            </ol>\n            <p>{calories}</p>\n            <img className={style.image} src={image} alt=\"\"/>\n\n        </div>\n    );\n\n}\n\n\nexport default Recipe;","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport './App.css';\n\nconst App=()=>{\n\n  const APP_ID=\"beddd657\";\n  const APP_KEY=\"e80dc83fcad5a12a2b49a72d2b93bcc3\";\n\n  const[recipes, setRecipes]=useState([]);\n  const[search, setSearch]=useState(\"\");\n  const[query, setQuery]=useState('paneer')\n\n\n  useEffect(()=>{\n    getRecipes();\n   },[query]);\n\n  const getRecipes = async()=>{\n    const response= await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n    const data=await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  } \n\n  const updateSearch=e=>{\n    setSearch(e.target.value);\n    console.log(search);\n  }\n\n  const getSearch=e=>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return(\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\n        <button className=\"search-button\" type=\"submit\">Search</button>\n\n      </form>\n      <div className=\"recipes\">\n      {recipes.map(recipe=>(\n        <Recipe \n        title={recipe.recipe.label} \n        calories={recipe.recipe.calories}\n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}\n        />\n      ))}\n      </div>\n      \n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};"],"sourceRoot":""}